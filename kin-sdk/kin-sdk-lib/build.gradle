apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

// maven plugin and group definition
// needed for jitpack support
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.kinecosystem'


android {
    compileSdkVersion android_compilesdk_version

    defaultConfig {
        minSdkVersion android_minsdk_version
        targetSdkVersion android_targetsdk_version
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "kin.sdk.MultiDexAndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

dependencies {
    implementation project(':kin-sdk:kin-base')
    implementation "com.android.support:support-annotations:$androidsupport_version"
    implementation "com.github.joshjdevl.libsodiumjni:libsodium-jni-aar:$sodium_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    api "com.github.kinecosystem:kin-utils-android:$kinutilsandroid_version"

    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "com.google.code.gson:gson:$gson_version"
    testImplementation 'org.json:json:20180813'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    androidTestImplementation "junit:junit:$junit_version"
    androidTestImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"
    androidTestImplementation "com.android.support.test:runner:$supporttest_version"
    androidTestImplementation "com.android.support.test:rules:$supporttest_version"
    androidTestImplementation "com.android.support:multidex:$multidex_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

//bundle javadocs with published aar
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
artifacts {
    archives sourcesJar
}

//jacoco unified code coverage
jacoco {
    toolVersion = jaccoco_version
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', '**/*coverage.ec'
    ])
}

//remove all non test related from kotlin source set, to make sure no kotlin files included in build
afterEvaluate {
    android.sourceSets.all { sourceSet ->
        if (!sourceSet.name.contains("test")) {
            sourceSet.kotlin.setSrcDirs([])
        }
    }
}
